Puppet:

modules:
Install modules from Puppet Forge
Installed modules are found in the modulepath: /etc/puppetlabs/code/environments/production/modules.
(Modules are synonymous with cookbooks in Chef)

Node groups:
Nodes are individual instances or servers that the Puppet agent runs on.  It can automatically query for updates from
the Catalog in Puppet Master.

Puppet Master:
This is where all the puppet code lives (i.e. chef server)

Puppet Agent:
Agent that runs on an individual instance/server.
puppet agent --mytest

Resources:

Resource Abstraction Layer (RAL)
-users, files, services, packages are Resource Units

Puppet's Domain Specific Language (DSL)
-A block of code that describes a resource declaration is written the Puppet DSL.
-Puppet DSL is declarative and only describe the desired end state. Providers will handle the implementation.
-Puppet can inspect the current state of any existing resource in the same syntax you would declare the state (unlike
chef which has the issue when it converges, the state cannot always be inspected).

Built-in Resource Types:
>puppet describe --list
i.e.
-user A user
-group A user group
-file A specific file
-package A software package
You can get a list of parameters from any resource:
>puppet describe user | less

Resources are defined as list of Hashes (hence the =>)
type {'title':
    attribute => 'value',
}

>puppet resource <type> <name>

Common Resource Types:

    user: A user
    group: A user group
    file: A specific file
    package: A software package
    service: A running service
    cron: A scheduled cron job
    exec: An external command
    host: A host entry



Puppet Apply:
#############

Puppet apply manages systems without needing to contact a Puppet master server. It compiles its own configuration catalog, using Puppet modules and various other data sources, then immediately applies the catalog.

>puppet apply -e
The -e flag will limit the apply to one-off changes.
i.e.
puppet apply -e "user { 'galatea': ensure => present, }"

Noop:
Noop command allows you to do a dry run before actually applying the changes:
puppet apply --noop cowsayings/examples/cowsay.pp

Edit a Specific Resource:
puppet resource -e myresource
>puppet resource -e user galatea

Puppet Agent:
#############


Puppet agent manages systems, with the help of a Puppet master. It requests a configuration catalog from a Puppet master server, then ensures that all resources in that catalog are in their desired state

>puppet agent -t


Manifests and Classes:
######################

Manifests are puppet code saved to a *.pp file.  Classes are often saved to a
manifest file and referenced later.

## Puppet Classes:

Step 1: Define the class and to a manifest file.
Step 2: Declare the class to apply resource declarations the class contains to a node.

Classes vs Defined Types
########################

Puppet classes are SINGLETONS as they can only be declared once per node.  Classes defines a particular class of machine.  Defined Types can have many instances on a machine and can encapsulate classes and other resources. So defined type add_user can be called multiple times but the add.pp class can only be refernced once.

i.e.
Defined type in <modulepapath>/manifests/add_user.pp:
define add_user ( $username, $comment, $home, $shell, $uid, $gid, $password)
    {


    # Create the user. This is where most of the magic happens.
    username { "$username":
    name => "$username",
    ensure => present,
    comment => "$comment",
    home => "$home",
    shell => "$shell",
    uid => "$uid",
    password => "$password",
    gid => "$gid"
    }


Class Users in <modulepapath>/users/manifests/add.pp:
class users::add( $u_name, $u_comment, $u_home, $u_shell, $u_uid, $u_gid, $u_password)
{
  users::add_user{ $u_name:
    $username => $u_name, 
    $comment  => $u_comment, 
    $home     => $u_home, 
    $shell    => $u_shell, 
    $uid      => $u_uid, 
    $gid      => $u_gid, 
    $password => $u_password,
  }

  files { .... }
}

Call the class in site.pp:
import "classes/*.pp"
    node default{
      class { 'add_user': 
        username => "saga",
        comment => "Arun Sag",
        gid => "100",
        home => "/home/saga",
        password => '$1$passwordhash/',
        shell => "/bin/bash",
        uid => "70960",
      }
    }
Create a Class:
###############

Step 1:
Define classes in manifests directory: myclasses/manifests/cowsay.pp
class cowsayings::cowsay {
  package { 'cowsay':
    ensure => present,
    provider => 'gem',
  }
}

Step 2:
Then declare them in the app to be used myapp/cowsay.pp
include cowsayings::cowsay

Note:
cowsayings:: is the module where the classes are defined.

## Wrapper Classes: Classes to define multiple classes:

class lamp {
  include apache::server
  include puppetlabs::php
  include mysql::server
}


Modules
#######

Find the modulepath (typically /opt/puppetlabs/puppet/modules)


Files are referenced: puppet://{server hostname (optional)}/{mount point}/{remainder of path}
The hostname is usually implied as its the puppet master server. The path defaults to the modulepath. And the files directory is implicit so '/modules/vimrc/files/vimrc' is then just '/modules/vimrc/vimrc':
source => 'puppet:///modules/vimrc/vimrc',

Scope:
######

node 'learning.puppetlabs.vm' {
  class { '::mysql::server':
    root_password    => 'strongpassword',
    override_options => {
      'mysqld' => { 'max_connections' => '1024' }
    },
  }
}

Puppet will look for server.pp in the scope 'mysql::server' at top level of the mysql/manifests directory. So mysql::server corresponds to:

/etc/puppetlabs/code/environments/production/modules/mysql/manifests/server.pp

If no parameters need to be set or overriden then you can just call the class:
node 'learning.puppetlabs.vm' {
  include ::mysql::server::account_security
  ...
}


Types and Providers:
####################

Types:
A type defines the interface for a resource: the set of properties you can use to define a desired state for the resource, and the parameters that don't directly map to things on the system, but tell Puppet how to manage the resource. Both properties and parameters appear in the resource declaration syntax as attribute value pairs.
file is the type
the path, owner, group and mode represent the Attributes, Parameters, Properties.
i.e.
file { '/etc/passwd':
  owner => root,
  group => root,
  mode  => 644
}

Providers:
Providers implement the same resource type on different kinds of systems. They usually do this by calling out to external commands.
i.e.
provider 'exec'' can call out to posix, shell, and windows depending on the platform

Variables and Parameters:
#########################


