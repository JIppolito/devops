#!/bin/bash

#############
# Variables #
#############
TMPDIR="tmp"
#ORACLE_HOME="/opt/oracle/instantclient_11_1"
#LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ORACLE_HOME
PYTHON_HOME="/opt/configurator/python2.6"
USER="configurator"
USERID=700

if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

#############
# Functions #
#############
exit_with_error ()
{
	echo
	echo "Installation failed!"
	exit
}

check_success ()
{
  if [[ $1 != 0 ]]; then
    exit_with_error
  fi
}

echo "Creating tmp directory"
if [ -d $TMPDIR ]; then
  rm -rf $TMPDIR
fi
mkdir $TMPDIR



install_build-dep ()
{
  yum install -y gcc gcc-c++ autoconf automake
}


setup_user ()
{
  #create the account if it does not exist
  finger $USER | grep "Login"
  USER_EXISTS=$?
  if [ "$USER_EXISTS" != 0 ]; then
    echo "---> Creating the \"$USER\" account"
    /usr/sbin/useradd --uid $USERID --gid $USERID -m -r -d /home/$USER $USER$USER/.profile
    chown -R $USER:$USER /home/$USER
    echo " Created user."
  else
    echo
    echo "[WARNING]"
    echo "[WARNING] ---> \"$USER\" already exists."
    echo "[WARNING] Skipping creating user."
    echo "[WARNING]"
    echo
  fi
}

install_simplejson ()
{
  echo
  echo "---> Installing Simplejson 2.2.1 from source"
  echo
  pushd $TMPDIR
  tar -xzf "../../res/simplejson-2.2.1.tar.gz"
  cd "simplejson-2.2.1"
  $PYTHON_HOME/bin/python setup.py install
  check_success $?
  cd ..
  rm -rf "simplejson-2.2.1"
  popd
  echo
}

install_openssl ()
{
  echo
  echo "---> Installing OpenSSL RedHat packages"
  echo
  yum install -y openssl
  yum install -y openssl-devel
  echo
# Uncomment out section below to install from source, doesn't work on RHEL6
#  echo
#  echo "---> Installing OpenSSL from source"
#  echo
#  pushd $TMPDIR
#  unzip -q "../../res/openssl-0.9.8g.zip"
#  cd "openssl-0.9.8g"
#  ./config enable-shared
#  make
#  make install
#  check_success $?
#  cd ..
#  rm -rf "openssl-0.9.8g"
  popd
}

install_sqlite ()
{
  echo
  echo "---> Installing SQLite from source"
  echo
  pushd $TMPDIR
  tar -xzf "../../res/sqlite-autoconf-3071000.tar.gz"
  cd "sqlite-autoconf-3071000"
  ./configure --enable-shared
  make
  make install
  check_success $?
  cd ..
  rm -rf "openssl-0.9.8g"
  popd
}

install_python ()
{
  echo
  echo "---> Installing Python 2.6.8"
  echo
  pushd $TMPDIR
  tar -xzf "../../res/Python-2.6.8.tgz"
  cd "Python-2.6.8"
  #move the custom Setup.dist file into place
  cp "../../../res/Setup.dist" "Modules/Setup.dist"
  cp "Modules/Setup.dist" "Modules/Setup"
  #configure python
  ./configure --prefix=$PYTHON_HOME --with-threads --enable-shared
  #compile python
  make
  make install
  check_success $?
  cd ..
  rm -rf "Python-2.6.8"
  #set up the new libs
  echo "$PYTHON_HOME/lib" > "/etc/ld.so.conf.d/opt-python2.6.conf"
  /sbin/ldconfig
  popd
  echo
}


#install_cx_oracle ()
#{
#  echo
#  echo "---> Installing cx_Oracle"
#  echo
#  pushd $TMPDIR
#  if [ -d $ORACLE_HOME ]; then
#    rm -rf $ORACLE_HOME
#  fi
#  mkdir -p "$ORACLE_HOME"
#  unzip -q "../../res/basic-11.1.0.70-linux-x86_64.zip"
#  mv "instantclient_11_1" "$ORACLE_HOME/lib"
#  unzip -q "../../res/sdk-11.1.0.7.0-linux-x86_64.zip"
#  mv "instantclient_11_1/sdk" "$ORACLE_HOME/sdk"
#  pushd "$ORACLE_HOME/lib"
#  ln -s libclntsh.so.11.1 libclntsh.so
#  popd
#  rm -rf "instantclient_11_1"
#  #set up the new libs
#  echo "$ORACLE_HOME/lib" > "/etc/ld.so.conf.d/opt-oracle_instantclient_11_1.conf"
#  /sbin/ldconfig
#  tar -xzf "../../res/cx_Oracle-5.1.1.tar.gz"
#  cd "cx_Oracle-5.1.1"
#  export ORACLE_HOME=$ORACLE_HOME
#  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ORACLE_HOME
#  $PYTHON_HOME/bin/python setup.py build
#  $PYTHON_HOME/bin/python setup.py install
#  check_success $?
#  cd ..
#  rm -rf "cx_Oracle-5.1.1"
#  popd
#}

install_swig ()
{
  echo
  echo "---> Installing swig"
  echo
  yum install -y pcre-devel
  pushd $TMPDIR
  tar -xzf "../../res/swig-2.0.3.tar.gz"
  cd "swig-2.0.3"
  ./configure --enable-shared
  make
  make install
  check_success $?
  cd ..
  rm -rf "swig-2.0.3"
  echo "Also installing the platform's swig install as a backup" 
  yum install -y swig
  popd
}

install_m2crypto ()
{
  echo "---> Setting up 'm2crypto'"
  pushd $TMPDIR
  tar -xzf '../../res/M2Crypto-0.21.1.tar.gz'
  cd "M2Crypto-0.21.1"
  export PYTHON_HOME=$PYTHON_HOME
  rm -f fedora_setup.sh
  cp ../../../res/fedora_setup.sh fedora_setup.sh
  ./fedora_setup.sh build
  ./fedora_setup.sh install
  check_success $?
  cd ..
  rm -rf "M2Crypto-0.21.1"
  popd
  echo
}

install_sleekxmpp ()
{
  echo "---> Setting up 'sleekxmpp'"
  pushd $TMPDIR
  tar -xzf '../../res/macdiesel-SleekXMPP-smallfoot-1.0.2-good-0-g9cdf876.tar.gz'
  cd "macdiesel-SleekXMPP-9cdf876"
  $PYTHON_HOME/bin/python setup.py install
  cd ..
  check_success $?
  rm -rf "macdiesel-SleekXMPP-9cdf876"
  popd
  echo
}

install_dnspython ()
{
  echo "---> Setting up 'dnspython'"
  pushd $TMPDIR
  tar -xzf '../../res/dnspython-1.9.4.tar.gz'
  cd "dnspython-1.9.4"
  $PYTHON_HOME/bin/python setup.py install
  check_success $?
  cd ..
  rm -rf "dnspython-1.9.4"
  popd
  echo
}

install_pexpect ()
{
  echo "---> Setting up 'pexpect'"
  pushd $TMPDIR
  tar -xzf '../../res/pexpect-2.3.tar.gz'
  cd "pexpect-2.3"
  $PYTHON_HOME/bin/python setup.py install
  check_success $?
  cd ..
  rm -rf "pexpect-2.3"
  popd
  echo
}

install_django ()
{
  echo "---> Setting up 'django 1.3'"
  pushd $TMPDIR
  tar -xzf '../../res/Django-1.3.tar.gz'
  cd "Django-1.3"
  cp -r "django" "$PYTHON_HOME/lib/python2.6/site-packages"
  check_success $?
  cd ..
  rm -rf "Django-1.3"
  popd
  echo
}


install_apache ()
{
  echo "---> Setting up 'apache2'"
  pushd $TMPDIR
  if [ -d /home/$USER/apache2 ]; then
    rm -rf /home/$USER/apache2
  fi
  tar -xzf '../../res/httpd-2.2.22.tar.gz'
  cd "httpd-2.2.22"
  ./configure --enable-shared --prefix="/home/$USER/apache2" \
    --enable-alias=shared \
    --enable-auth_basic=shared \
    --enable-authn_file=shared \
    --enable-authz_default=shared \
    --enable-authz_groupfile=shared \
    --enable-authz_host=shared \
    --enable-authz_user=shared \
    --enable-autoindex=shared \
    --enable-cgid=shared \
    --enable-dir=shared \
    --enable-env=shared \
    --enable-fcgid=shared \
    --enable-include=shared \
    --enable-mime=shared \
    --enable-negotiation=shared \
    --enable-reqtimeout=shared \
    --enable-rewrite=shared \
    --enable-setenvif=shared \
    --enable-ssl=shared \
    --enable-status=shared \
    --enable-suexec=shared \
    --enable-wsgi=shared
  make
  make install
  check_success $?
  cd ..
  rm -rf "httpd-2.2.22"
  cp "../../res/httpd.conf" "/home/$USER/apache2/conf"
  cp "../../res/ess.conf" "/home/$USER/apache2/conf"
  chown -R $USER:$USER "/home/$USER/apache2"
  mkdir -p /var/log/httpd/
  touch /var/log/httpd/s2wizard-access.log
  touch /var/log/httpd/s2wizard-error.log
  chown $USER:$USER /var/log/httpd/s2wizard-access.log
  chown $USER:$USER /var/log/httpd/s2wizard-error.log
  popd
  echo
}


install_wsgi ()
{
  echo "---> Setting up 'mod_wsgi 3.3'"
  pushd $TMPDIR
  tar -xzf '../../res/mod_wsgi-3.3.tar.gz'
  cd "mod_wsgi-3.3" 
  ./configure --with-apxs=/home/$USER/apache2/bin/apxs \
    --with-python=/$PYTHON_HOME/bin/python
  make
  make install
  chown -R $USER:$USER /home/$USER/apache2/modules
  check_success $?
  cd ..
  rm -rf "mod_wsgi-3.3"
  popd
  echo
}

# See how we were called.
case "$1" in
  all)
        install_build-dep
        setup_user
	install_openssl
	install_sqlite
	install_python
	install_swig
	install_simplejson
	install_m2crypto
	install_sleekxmpp
	install_dnspython
	install_pexpect
	install_django
	install_apache
	install_wsgi
	;;
  build-dep)
	install_build-dep
	;;
  user)
        setup_user
        ;;
  openssl)
	install_openssl
        ;;
  sqlite)
	install_sqlite
        ;;
  python)
	install_python
        ;;
  swig)
        install_swig
        ;;
  simplejson)
	install_simplejson
	;;
  m2crypto)
	install_m2crypto
        ;;
  sleekxmpp)
        install_sleekxmpp
        ;;
  dnspython)
        install_dnspython
        ;;
  pexpect)
        install_pexpect
        ;;
  django)
        install_django
        ;;
  apache)
        install_apache
	install_wsgi
        ;;
  wsgi)
        install_wsgi
        ;;
  *)
        echo $"Usage: $prog {all|build-dep|user|openssl|sqlite|python|swig|simplejson|m2crypto|sleekxmpp|dnspython|pexpect|django|apache|wsgi}"
        exit 1
esac


rm -rf $TMPDIR
echo
echo "Installation complete."